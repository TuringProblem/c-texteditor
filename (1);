#include <asm-generic/errno-base.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <termios.h>
#include <unistd.h>

#define CTRL_KEY(k) ((k) & 0x1f)

enum editorMode { MODE_NORMAL, MODE_INSERT };

struct editorConfig {
  int cx, cy;
  enum editorMode mode;
  struct termios origTermios;
  char statusmsg[80];
};

struct editorConfig E;

void die(const char *s) {
  write(STDOUT_FILENO, "\x1b[2J", 4);
  write(STDOUT_FILENO, "\x1b[H", 3);
  perror(s);
  exit(1);
}

void disableRawMode() {
  if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &E.origTermios) == -1)
    die("tcsetattr");
}

void enableRawMode() {
  // check if attr works
  if (tcgetattr(STDIN_FILENO, &E.origTermios) == -1)
    die("tcgetattr");
  atexit(disableRawMode);
  struct termios raw = E.origTermios;
  // flags
  raw.c_iflag &= ~(BRKINT | ICRNL | INPCK | ISTRIP | IXON);
  raw.c_oflag &= ~(OPOST);
  raw.c_cflag |= (CS8);
  raw.c_lflag &= ~(ECHO | ICANON | IEXTEN | ISIG);
  raw.c_cc[VMIN] = 0;
  raw.c_cc[VTIME] = 1;
  if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw) == -1)
    die("tcsetattr");
}

char editorReadKey() { // this is going to enable vim movements
  int nRead;
  char character;
  while ((nRead = read(STDIN_FILENO, &character, 1)) != 1) {
    if (nRead == -1 && errno != EAGAIN)
      die("read");
  }
  return character;
}

void editorMoveCursor(char key) {
  switch (key) {
  case 'h':
    if (E.cx != 0) {
      E.cx--;
    }
    break;
  case 'j':
    E.cy++;
    break;
  case 'k':
    if (E.cy != 0) {
      E.cy--;
    }
    break;
  case 'l':
    E.cx++;
    break;
  }
}

void editorRefreshScreen() {
  write(STDOUT_FILENO, "\x1b[2J", 4);
  write(STDOUT_FILENO, "\x1b[H", 3);

  char buf[32];
  snprintf(buf, sizeof(buf), "x1b[%d;%dH", E.cy + 1, E.cx + 1);
  write(STDOUT_FILENO, buf, strlen(buf));
}

void editorProcessKeypress() {
  char c = editorReadKey();
  switch (c) {
  case CTRL_KEY('q'):
    write(STDOUT_FILENO, "/x1b[2J", 4);
    write(STDOUT_FILENO, "/x1b[H", 3);
    exit(0);
    break;
  case 'h':
  case 'j':
  case 'k':
  case 'l':
    editorMoveCursor(c);
    break;
  }
}

void initEditor() {
  E.cx = 0;
  E.cy = 0;
}

int main() {
  enableRawMode();
  initEditor();
  while (1) {
    editorRefreshScreen();
    editorProcessKeypress();
  }
  return 0;
}
